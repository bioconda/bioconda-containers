on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
      tags:
        required: true
        type: string
      busybox_version:
        required: false
        type: string
      debian_version:
        required: false
        type: string
      image_prefix:
        required: false
        type: string
      archs:  # space-separated list of architectures, e.g., "arm64 amd64"
        required: true
        type: string

jobs:
  build:
    name: Generic build
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: Build
      id: build
      run: |
        set -xeu

        # Store provided inputs as local vars
        image_name='${{ inputs.image_name }}${{ inputs.image_prefix }}'
        image_dir='images/${{ inputs.image_name }}'
        tags='${{ inputs.tags }}'
        debian_version='${{ inputs.debian_version }}'
        busybox_version='${{ inputs.busybox_version }}'
        archs='${{ inputs.archs }}'

        # Adds image and tags to outputs which can be used in later steps.
        printf %s\\n \
          "image_dir=${image_dir}" \
          "image_name=${image_name}" \
          "tags=$( echo ${tags} )" \
          >> $GITHUB_OUTPUT

        # Dockerfile lives here
        cd $image_dir

        for tag in ${tags} ; do
          buildah manifest create "${image_name}:${tag}"
        done

        # Incrementally compose build args. Using this 
        BUILD_ARGS=""
        if [ ! -z "${debian_version}" ]; then
          BUILD_ARGS=$(echo $BUILD_ARGS "--build-arg=debian_version=$debian_version")
        fi

        # If busybox_version was specified, assume we are making a busybox image.
        if [ ! -z "${busybox_version}" ]; then
          BUILD_ARGS=$(echo $BUILD_ARGS "--build-arg=busybox_version=$busybox_version")

          # Make a busybox image that we'll use further below.
          # --iidfile prints the built image ID to the specified file so we can
          # refer to the image later
          iidfile="$( mktemp )"
          buildah bud \
            --iidfile="${iidfile}" \
            --file=Dockerfile.busybox \
            $BUILD_ARGS
          busybox_image="$( cat "${iidfile}" )"
          rm "${iidfile}"

          # And then extend the build args with this image.
          BUILD_ARGS=$(echo $BUILD_ARGS "--build-arg=busybox_image=${busybox_image}")
        fi

        for arch in $archs ; do
          iidfile="$( mktemp )"
          buildah bud \
            --arch="${arch}" \
            --iidfile="${iidfile}" \
            $BUILD_ARGS
          image_id="$( cat "${iidfile}" )"
          rm "${iidfile}"

          # Extract various package info and version info to store as labels
          container="$( buildah from "${image_id}" )"
          run() { buildah run "${container}" "${@}" ; }
          deb_list="$( run cat /.deb.lst | tr '\n' '|' | sed 's/|$//' )"
          pkg_list="$( run cat /.pkg.lst | tr '\n' '|' | sed 's/|$//' )"
          glibc="$( run sh -c 'exec "$( find -xdev -name libc.so.6 -print -quit )"' | sed '1!d' )"
          debian="$( run cat /etc/debian_version | sed '1!d' )"
          bash="$( run bash --version | sed '1!d' )"
          buildah rm "${container}"

          # Store package/version info as labels for the image
          container="$( buildah from "${image_id}" )"
          buildah config \
            --label=glibc="${glibc}" \
            --label=debian="${debian}" \
            --label=bash="${bash}" \
            --label=deb-list="${deb_list}" \
            --label=pkg-list="${pkg_list}" \
            "${container}"

          # Store the new image (now with labels)
          image_id="$( buildah commit "${container}" )"
          buildah rm "${container}"

          # image tag includes arch; then added to manifest which does not include arch
          for tag in ${tags} ; do
            buildah tag \
              "${image_id}" \
              "${image_name}:${tag}-${arch}"
            buildah manifest add \
              "${image_name}:${tag}" \
              "${image_id}"
          done
        done

    - name: Test
      run: |
        set -xeu

        # Store inputs as local variables
        image_name='${{ inputs.image_name }}'
        image_dir="images/${image_name}"

        # Extract image IDs from the manifest built in the last step
        ids="$(
          for tag in ${{ inputs.tags }} ; do
            buildah manifest inspect "${image_name}:${tag}" \
              | jq -r '.manifests[]|.digest' \
              | while read id ; do
                  buildah images --format '{{.ID}}{{.Digest}}' \
                  | sed -n "s/${id}//p"
                done
          done
          )"

        # Run the tests; see Dockerfile.test in the relevant image dir for the
        # actual tests run
        ids="$( printf %s "${ids}" | sort -u )"
        for id in ${ids} ; do
          podman history "${id}"
          buildah bud \
            --build-arg=base="${id}" \
            --file=Dockerfile.test \
            "${image_dir}"
        done
        buildah rmi --prune || true
