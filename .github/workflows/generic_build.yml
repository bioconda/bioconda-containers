on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
      tags:
        required: true
        type: string
      busybox_version:
        required: false
        type: string
      debian_version:
        required: false
        type: string
      image_prefix:
        required: false
        type: string

jobs:
  build:
    name: Generic build
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: Build
      id: build
      run: |
        set -xeu
        image_name='${{ inputs.image_name }}${{ inputs.image_prefix }}'
        image_dir='images/${{ inputs.image_name }}'
        tags='${{ inputs.tags }}'
        debian_version='${{ inputs.debian_version }}'
        echo $image_name
        echo $image_dir
        echo $tags

        # Adds image and tags to outputs which can be used in later steps.
        printf %s\\n \
          "image_dir=${image_dir}" \
          "image_name=${image_name}" \
          "tags=$( echo ${tags} )" \
          >> $GITHUB_OUTPUT

        cd $image_dir
        for tag in ${tags} ; do
          buildah manifest create "${image_name}:${tag}"
        done

        # --iidfile prints the built image ID to the specified file. This is
        # used so we can refer to the image in later steps.
        for arch in amd64 arm64 ; do
          iidfile="$( mktemp )"
          buildah bud \
            --arch="${arch}" \
            --iidfile="${iidfile}" \
            --build-arg=debian_version='${{ env.DEBIAN_VERSION }}'
          image_id="$( cat "${iidfile}" )"
          rm "${iidfile}"

          # Extract various package info and version info to store as labels
          container="$( buildah from "${image_id}" )"
          run() { buildah run "${container}" "${@}" ; }
          deb_list="$( run cat /.deb.lst | tr '\n' '|' | sed 's/|$//' )"
          pkg_list="$( run cat /.pkg.lst | tr '\n' '|' | sed 's/|$//' )"
          glibc="$( run sh -c 'exec "$( find -xdev -name libc.so.6 -print -quit )"' | sed '1!d' )"
          debian="$( run cat /etc/debian_version | sed '1!d' )"
          bash="$( run bash --version | sed '1!d' )"
          buildah rm "${container}"

          # Store package/version info as labels for the image
          container="$( buildah from "${image_id}" )"
          buildah config \
            --label=glibc="${glibc}" \
            --label=debian="${debian}" \
            --label=bash="${bash}" \
            --label=deb-list="${deb_list}" \
            --label=pkg-list="${pkg_list}" \
            "${container}"

          # Store the new image (now with labels)
          image_id="$( buildah commit "${container}" )"
          buildah rm "${container}"

          # image tag includes arch; then added to manifest which does not include arch
          for tag in ${tags} ; do
            buildah tag \
              "${image_id}" \
              "${image_name}:${tag}-${arch}"
            buildah manifest add \
              "${image_name}:${tag}" \
              "${image_id}"
          done
        done

