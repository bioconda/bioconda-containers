#! /bin/sh
set -xeu


prepare_remove_docs() {
  # remove lintian and docs (apart from copyright)
  rm -rf ./usr/share/{lintian,man}
  find ./usr/share/doc/ -type f ! -name copyright -delete
  find ./usr/share/doc/ -type d -empty -delete
}


prepare() {
  local pkg="${1}"
  shift
  local destdir="${1}"
  shift

  case "${pkg}" in
    libc6)
      # To reduce image size, remove all charset conversion modules apart
      # from smaller ones for some common encodings.
      # Update gconv-modules accordingly.
      # NOTE: When adding/removing any, check required dyn. linked libs!

      local gconv_path='./usr/lib/x86_64-linux-gnu/gconv'
      local gconv_modules_regex='UTF-\w+|UNICODE|ISO8859-(1|2|15)|CP125(0|1|2)|MACINTOSH'
      local gconv_modules_file_tmp='./.tmp.gconv-modules'

      mv "${gconv_path}"/gconv-modules "${gconv_modules_file_tmp}"

      find "${gconv_path}" \
        -mindepth 1 -maxdepth 1 \
        -regextype posix-extended \
        ! -regex '.*/('"${gconv_modules_regex}"').so' \
        -print -delete

      grep -E \
        '^\s*$|^#|^(alias\s+.*|module\s+[^\s]+\s+[^\s]+)\s+\<('"${gconv_modules_regex}"')(//|\s)' \
        "${gconv_modules_file_tmp}" \
        | sed -nEe '1N;N;/^(#.*)\n.*\1/{D;D};P;D' | cat -s \
        > "${gconv_path}"/gconv-modules
      rm "${gconv_modules_file_tmp}"
      iconvconfig --prefix ./

      ;;
    bash)
      rm -rf ./usr/share/locale
      ;;
    libc-bin|libgcc1|base-files|gcc-6-base|gcc-8-base|gcc-10-base|libcrypt1|libgcc-s1|libtinfo5|libtinfo6|ncurses-base|zlib1g)
      :
      ;;
    *)
      # Abort if we get an unexpected package.
      printf %s\\n "\`prepare\` not defined for ${pkg}" >&2
      return 1
      ;;
    esac
    prepare_remove_docs
}


postinst_ldconfig_trigger() {
  ldconfig --verbose -r ./
}


postinst() {
  local pkg="${1}"
  shift
  local destdir="${1}"
  shift

  case "${pkg}" in
    libc-bin)
      cp -p --remove-destination \
        ./usr/share/libc-bin/nsswitch.conf \
        ./etc/nsswitch.conf
        postinst_ldconfig_trigger
      ;;
    base-files)
      cp "${destdir}/DEBIAN/postinst" ./base-files-postinst
      chroot ./ sh /base-files-postinst configure
      rm ./base-files-postinst
      ;;
    bash)
      # Replace BusyBox's sh by Bash
      rm -f ./bin/sh
      ln -s /bin/bash ./bin/sh
      chroot ./ add-shell /bin/sh
      chroot ./ add-shell /bin/bash
      chroot ./ add-shell /bin/rbash
      # Bash 4.* did not have default key bindings for control-arrow-key key
      # combinations. Add some for convenience:
      cat >> ./etc/inputrc <<'EOF'

"\e[5C": forward-word
"\e[5D": backward-word
"\e\e[C": forward-word
"\e\e[D": backward-word
"\e[1;5C": forward-word
"\e[1;5D": backward-word
EOF
      ;;
    libc6|libgcc1|libcrypt1|libgcc-s1|libtinfo5|libtinfo6|zlib1g)
      postinst_ldconfig_trigger
      ;;
    gcc-6-base|gcc-8-base|gcc-10-base|ncurses-base)
      :
      ;;
    *)
      # Abort if we get an unexpected package.
      printf %s\\n "\`postinst\` not defined for ${pkg}" >&2
      return 1
      ;;
  esac
}


install_pkg() {
  local pkg="${1}"
  shift

  local work_dir="${work_base}/${pkg}"
  mkdir "${work_dir}"
  cd "${work_dir}"

  # Download package
  apt-get download "${pkg}"
  local deb_file
  deb_file="$( find "$( pwd )" -maxdepth 1 -name '*.deb' )"

  # Prepare package
  local destdir="${work_dir}/destdir"
  mkdir "${destdir}"
  cd "${destdir}"
  dpkg-deb --raw-extract "${deb_file}" ./
  prepare "${pkg}" "${destdir}"
  dpkg-deb --build ./ "${deb_file}"
  cd "${work_dir}"

  # Extract package
  dpkg-deb --vextract "${deb_file}" "${root_fs}"
  rm "${deb_file}"
  printf %s\\n "$( basename "${deb_file}" )" >> "${root_fs}/.deb.lst"

  # Finalize package installation
  cd "${root_fs}"
  postinst "${pkg}" "${destdir}"

  cd "${work_base}"
  rm -rf "${work_dir}"
  printf %s\\n "${pkg}" >> "${root_fs}/.pkg.lst"
}


get_deps() {
  [ -z "${*}" ] && return 0

  # Instead of using `apt-cache depends --recurse` or `debfoster -d`, recurse
  # manually so that we can exclude some packages that are either already
  # installed or would pull in files/packages we don't need.

  local ignore_pkgs
  ignore_pkgs="$(
    printf %s\\n base-files '<awk>' debianutils dash \
      | grep -vFx "$( printf %s\\n "${@}" )"
  )"
  [ -f "${root_fs}/.pkg.lst" ] && \
    ignore_pkgs=$( printf %s\\n ${ignore_pkgs} $( cat -s "${root_fs}/.pkg.lst" ) )

  local new_pkgs="${*}"
  local old_pkgs=''
  while ! [ "${new_pkgs}" = "${old_pkgs}" ] ; do
    old_pkgs="${new_pkgs}"
    new_pkgs="$(
      apt-cache depends \
        --no-recommends --no-suggests --no-conflicts \
        --no-breaks --no-replaces --no-enhances \
        ${old_pkgs} \
        | sed -n 's/.*Depends: //p' | cat -s
    )"
    new_pkgs="$(
      printf %s\\n ${old_pkgs} ${new_pkgs} \
        | sort -u \
        | grep -vFx "$( printf %s\\n ${ignore_pkgs} )"
    )"
  done
  printf %s\\n ${new_pkgs}
}


install_with_deps() {
  get_deps "${@}" | while read -r pkg ; do
    install_pkg "${pkg}"
  done
}


main() {
  root_fs="${1}"
  shift
  work_base="${1}"
  shift

  mkdir -p "${work_base}"
  cd "${work_base}"

  apt-get update

  # Unconditionally install glibc (package libc6).
  # Also install dependencies acc. to `apt-cache depends`:
  #  - libgcc1 only consists of libgcc_s.so.1 (+ docs, which we remove).
  #  - gcc-{6,7,8}-base only has empty directories (+ docs, which we remove).
  install_with_deps libc6

  # libc-bin must be in ${@} for Unicode support (C.UTF-8 locale).
  install_with_deps "${@}"

  # base-files contains /usr/share/common-licenses/, /etc/profile, etc.
  # Install base-files afterwards so we have a working sh for the postinst.
  install_with_deps base-files

  cd "${root_fs}"
  rm -rf "${work_base}"
}


main "${@}"
