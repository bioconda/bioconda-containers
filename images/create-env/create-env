#! /bin/sh -eu

for arg do
  case "${arg}" in
    --help )
      cat <<'end-of-help'
Usage: create-env [OPTIONS]... [--] PREFIX [CONDA_CREATE_ARGS]...
Use conda (or mamba via --conda=mamba) to create a Conda environment at PREFIX
according to specifications given by CONDA_CREATE_ARGS.

  --conda=CONDA               text
  --create-command=CREATE     text
  --env-activate-args=ARGS    text
  --env-activate-script=FILE  text
  --env-execute-script=FILE   text
  --remove-files=GLOB         text
  --strip[=yes|=no]           text
end-of-help
      exit 0 ;;
    --conda=* )
      conda_impl="${arg#--conda=}"
      shift ;;
    --create-command=* )
      create_command="${arg#--create-command=}"
      shift ;;
    --env-activate-args=* )
      env_activate_args="${arg#--env-activate-args=}"
      shift ;;
    --env-activate-script=* )
      env_activate_file="${arg#--env-activate-script=}"
      shift ;;
    --env-execute-script=* )
      env_execute_file="${arg#--env-execute-script=}"
      shift ;;
    --remove-files=* )
      remove_files_globs="$(
        printf '%s\n' \
          ${remove_files_globs+"${remove_files_globs}"} \
          "${arg#--remove-files=}"
      )"
      shift ;;
    --strip=yes | --strip )
      strip=1 ; shift ;;
    --strip=no )
      strip=0 ; shift ;;
    --licenses-path=* )
      licenses_path="${arg#--licenses-path=}"
      shift ;;
    -- )
      break ;;
    -* )
      printf 'unknown option: %s\n' "${arg}"
      exit 1 ;;
    * )
      break
  esac
done

if [ $# -eq 0 ] ; then
  printf 'missing argument: environment path\n'
  exit 1
fi

prefix="${1%%/}"
shift

conda_impl="${conda_impl:-conda}"
create_command="${create_command-create}"
env_activate_args="--prefix='${prefix}' ${env_activate_args-}"
env_activate_file="${env_activate_file-"${prefix}/env-activate.sh"}"
env_execute_file="${env_execute_file-"${prefix}/env-execute"}"
remove_files_globs="$( printf '%s\n' "${remove_files_globs-}" | sort -u )"
strip="${strip-0}"
licenses_path="${licenses_path-conda-meta}"


set +u
eval "$( conda shell.posix activate base )"
set -u

# Use CONDA_ALWAYS_COPY=1 to cut links to package cache.
# (Which is esp. important if --strip or --remove-files are used!)
CONDA_YES=1 \
  CONDA_ALWAYS_COPY="${CONDA_ALWAYS_COPY:-1}" \
  ${conda_impl} \
  ${create_command} \
  --prefix="${prefix}" \
  "${@}"

if [ -n "${env_activate_file}${env_execute_file}" ] ; then
  activate_script="$(
    eval "set -- ${env_activate_args}"
    print-env-activate "${@}"
  )"
  if [ -n "${env_activate_file-}" ] ; then
    printf '%s\n' \
      "${activate_script}" \
      > "${env_activate_file}"
    activate_script=". '${env_activate_file}'"
  fi
  if [ -n "${env_execute_file-}" ] ; then
    printf '%s\n' \
      '#! /bin/sh' \
      "${activate_script}" \
      'exec "${@}"' \
      > "${env_execute_file}"
    chmod +x "${env_execute_file}"
  fi
fi

if [ -n "${remove_files_globs}" ] ; then
  (
    eval "set -- $(
      printf %s "${remove_files_globs}" \
        | sed -e "s|.*|-path '${prefix}/&'|" -e '1!s/^/-o /' \
        | tr '\n' ' '
    )"
    find "${prefix}" \
      -type f \
      \( "${@}" \) \
      -delete
  )
fi

if [ "${strip}" = 1 ] ; then
  # Strip binaries. (Run strip on all files; ignore errors for non-ELF files.)
  find "${prefix}" \
    -type f \
    -exec strip {} \+ \
    2> /dev/null \
    || true
fi


if [ -n "${licenses_path}" ] ; then
  abs_licenses_path="$(
    cd "${prefix}"
    mkdir -p "${licenses_path}"
    cd "${licenses_path}"
    pwd
  )"
  pkgs_dirs="$(
    conda config --show pkgs_dirs \
      | sed -n 's|[^/]*\(/.*\)|"\1"|p' \
      | tr '\n' ' '
  )"
  (
    eval "set -- $(
      find "${prefix}/conda-meta" \
        -maxdepth 1 \
        -name \*.json \
        | sed 's|.*/\(.*\)\.json|"\1"|' \
        | tr '\n' ' '
    )"
    for pkg do
      pkg_info="$(
        eval "set -- ${pkgs_dirs}"
        for pkgs_dir ; do
          if [ -d "${pkgs_dir}/${pkg}/info" ] ; then
            printf %s "${pkgs_dir}/${pkg}/info"
            exit
          fi
        done
        printf 'missing metadata for %s\n' "${pkg}" 1>&2
        exit 1
      )"
      find "${pkg_info}" \
        -maxdepth 1 \
        \( -name LICENSE.txt -o -name licenses \) \
        -exec sh -c '
          mkdir -p "${2}"
          cp -flR "${1}" "${2}"
        ' -- {} "${abs_licenses_path}/${pkg}" \; \
        || {
          printf 'failed to copy licenses for %s\n' "${pkg}" 1>&2
          exit 1
        }
    done
  )
fi
